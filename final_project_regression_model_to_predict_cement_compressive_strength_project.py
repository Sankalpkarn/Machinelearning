# -*- coding: utf-8 -*-
"""Final_Project_Regression_Model_to_Predict_Cement_Compressive_Strength_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15nXVN1crgRjnJcnklqFhaWkIrhYA8Wo7

# **‚≠ê Regression Model to Predict Cement Compressive Strength**

# import library
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_percentage_error
import numpy as np
from sklearn.metrics import mean_absolute_percentage_error, r2_score

# import data
cement = pd.read_csv('https://github.com/ybifoundation/Dataset/raw/main/Concrete%20Compressive%20Strength.csv')

# view data
cement.head()

# info of data
cement.info()

# summary statistics
cement.describe()

# check for missing value
print(cement.isnull().sum())

# visualize pairplot
sns.pairplot(cement)

# columns name
cement.columns

# define y
y = np.array([1, 3, 5, 7])

# define X
X = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])

# splt data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# verify shape
print(cement.shape)

# select model
model = svm.SVC()

# train model
model.fit(X_train, y_train)

# predict with model
X_new = np.array([[9, 10], [11, 12]])
y_pred = model.predict(X_new)
print('Predictions:', y_pred)

# model evaluation
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-Squared:", r2)

# model MAE
from sklearn.metrics import mean_absolute_percentage_error
mae = mean_absolute_percentage_error(y_test, y_pred)
print("Mean Absolute Error:", mae)

# model MAPE
mape = np.mean(np.abs((y_test - y_pred) / y_test)) * 100
print("Mean Absolute Percentage Error:", mape)

# model MSE
mse = np.mean((y_test-y_pred)**2)
print("Mean Squared Error:", mse)

# future prediction
from sklearn.linear_model import LinearRegression
reg = LinearRegression().fit(X, y)
future_predictions = reg.predict(np.array([[6,7],[8,9],[10,11]]))

print("Future predictions:", future_predictions)

# define X_new
X_new = np.array([[1,2],[3,4],[5,6]])

# predict for X_new
y_pred = reg.predict(X_new)

print("Predictions for X_new:", y_pred)